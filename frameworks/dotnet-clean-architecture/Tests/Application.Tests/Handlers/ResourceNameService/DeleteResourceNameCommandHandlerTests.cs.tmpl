using Microsoft.Extensions.Logging;{{.CapsResourceNameSingular}}
using Moq;
using Application.Commands.{{.CapsResourceNameSingular}}Service;
using Application.Exceptions;
using Application.Handlers.{{.CapsResourceNameSingular}}Service;
using Core.Entities;
using Core.Repositories;

namespace Application.Tests.Handlers.{{.CapsResourceNameSingular}}Service
{
    public class Delete{{.CapsResourceNameSingular}}CommandHandlerTests
    {
        private readonly Mock<I{{.CapsResourceNameSingular}}Repository> _{{.SmallResourceNameSingular}}Repository;
        private readonly Mock<ILogger<Delete{{.CapsResourceNameSingular}}CommandHandler>> _logger;

        public Delete{{.CapsResourceNameSingular}}CommandHandlerTests()
        {
            _{{.SmallResourceNameSingular}}Repository = new();
            _logger = new();
        }

        [Fact]
        public async Task Handle_Throws{{.CapsResourceNameSingular}}NotFoundExceptionWhen{{.CapsResourceNameSingular}}NotFound()
        {
            // Arrange
            var Id = 123; // Replace with the ID you want to test
            var request = new Delete{{.CapsResourceNameSingular}}Command { Id = Id }; // Create a request object

            _{{.SmallResourceNameSingular}}Repository
                .Setup(r => r.GetByIdAsync(Id))
                .ReturnsAsync(({{.CapsResourceNameSingular}})null); // Mock the repository to return null

            var handler = new Delete{{.CapsResourceNameSingular}}CommandHandler(_{{.SmallResourceNameSingular}}Repository.Object, _logger.Object);

            // Act and Assert
            await Assert.ThrowsAsync<{{.CapsResourceNameSingular}}NotFoundException>(
                async () => await handler.Handle(request, CancellationToken.None)
            );
        }
    }
}
