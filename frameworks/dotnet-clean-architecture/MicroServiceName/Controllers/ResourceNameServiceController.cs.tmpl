using MediatR;
using Microsoft.AspNetCore.Mvc;
using Application.Commands.{{.CapsResourceNameSingular}}Service;
using Application.Queries.{{.CapsResourceNameSingular}}Service;
using Application.Responses;
using System.Net;


namespace Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class {{.CapsResourceNameSingular}}ServiceController : ControllerBase
    {
        private readonly IMediator _mediator;
        private readonly ILogger<{{.CapsResourceNameSingular}}ServiceController> _logger;
        public {{.CapsResourceNameSingular}}ServiceController(IMediator mediator, ILogger<{{.CapsResourceNameSingular}}ServiceController> logger)
        {
            _mediator = mediator;
            _logger = logger;
        }

        {{ if .IsRESTCreateAllowed }}
        [HttpPost(Name = "Create{{.CapsResourceNameSingular}}")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        public async Task<ActionResult<int>> Create{{.CapsResourceNameSingular}}([FromBody] Create{{.CapsResourceNameSingular}}Command command)
        {
            var result = await _mediator.Send(command);
            return Ok(result);
        }
        {{ end }}

        {{ if .IsRESTListAllowed }}
        [HttpGet(Name = "GetAll{{.CapsResourceNamePlural}}")]
        [ProducesResponseType(typeof(IEnumerable<List<{{.CapsResourceNameSingular}}Response>>), (int)HttpStatusCode.OK)]
        public async Task<ActionResult<List<{{.CapsResourceNameSingular}}Response>>> GetAll{{.CapsResourceNamePlural}}(CancellationToken cancellationToken)
        {
            var response = await _mediator.Send(new GetAll{{.CapsResourceNamePlural}}Query(), cancellationToken);
            return Ok(response);
        }
        {{ end }}

        {{ if .IsRESTGetAllowed }}
        [HttpGet("{id}", Name = "Get{{.CapsResourceNameSingular}}ById")]
        [ProducesResponseType(typeof({{.CapsResourceNameSingular}}Response), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public async Task<ActionResult<{{.CapsResourceNameSingular}}Response>> Get{{.CapsResourceNameSingular}}ById(int id, CancellationToken cancellationToken)
        {
            _logger.LogInformation("{{.CapsResourceNameSingular}} GET request received for ID {id}", id);
            var response = await _mediator.Send(new Get{{.CapsResourceNameSingular}}ByIdQuery(id), cancellationToken);
            return Ok(response);
        }
        {{ end }}

        {{ if .IsRESTPutAllowed }}
        [HttpPut(Name = "Update{{.CapsResourceNameSingular}}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesDefaultResponseType]
        public async Task<ActionResult> Update{{.CapsResourceNameSingular}}([FromBody] Update{{.CapsResourceNameSingular}}Command command)
        {
            await _mediator.Send(command);
            return NoContent();
        }
        {{ end }}

        {{ if .IsRESTDeleteAllowed }}
        [HttpDelete("{id}", Name = "Delete{{.CapsResourceNameSingular}}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesDefaultResponseType]
        public async Task<ActionResult> Delete{{.CapsResourceNameSingular}}(int id)
        {
            _logger.LogInformation("{{.CapsResourceNameSingular}} DELETE request received for ID {id}", id);
            var cmd = new Delete{{.CapsResourceNameSingular}}Command() { Id = id };
            await _mediator.Send(cmd);
            return NoContent();
        }
        {{ end }}
    }
}
