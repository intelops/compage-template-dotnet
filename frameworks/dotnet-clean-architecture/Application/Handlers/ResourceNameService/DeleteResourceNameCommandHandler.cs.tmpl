using MediatR;
using Microsoft.Extensions.Logging;
using Application.Commands.{{.CapsResourceNameSingular}}Service;
using Application.Exceptions;
using Core.Entities;
using Core.Repositories;

namespace Application.Handlers.{{.CapsResourceNameSingular}}Service
{
    public class Delete{{.CapsResourceNameSingular}}CommandHandler : IRequestHandler<Delete{{.CapsResourceNameSingular}}Command>
    {
        private readonly I{{.CapsResourceNameSingular}}Repository _{{.SmallResourceNameSingular}}Repository;
        private readonly ILogger<Delete{{.CapsResourceNameSingular}}CommandHandler> _logger;

        public Delete{{.CapsResourceNameSingular}}CommandHandler(I{{.CapsResourceNameSingular}}Repository {{.SmallResourceNameSingular}}Repository, ILogger<Delete{{.CapsResourceNameSingular}}CommandHandler> logger)
        {
            _{{.SmallResourceNameSingular}}Repository = {{.SmallResourceNameSingular}}Repository;
            _logger = logger;
        }
        public async Task Handle(Delete{{.CapsResourceNameSingular}}Command request, CancellationToken cancellationToken)
        {
            var {{.SmallResourceNameSingular}}ToDelete = await _{{.SmallResourceNameSingular}}Repository.GetByIdAsync(request.Id);
            if ({{.SmallResourceNameSingular}}ToDelete == null)
            {
                throw new {{.CapsResourceNameSingular}}NotFoundException(nameof({{.CapsResourceNameSingular}}), request.Id);
            }

            await _{{.SmallResourceNameSingular}}Repository.DeleteAsync({{.SmallResourceNameSingular}}ToDelete);
            _logger.LogInformation($" Id {request.Id} is deleted successfully.");
        }
    }
}
