using AutoMapper;
using MediatR;
using Microsoft.Extensions.Logging;
using Application.Commands.{{.CapsResourceNameSingular}}Service;
using Core.Entities;
using Core.Repositories;

namespace Application.Handlers.{{.CapsResourceNameSingular}}Service
{
    public class Create{{.CapsResourceNameSingular}}CommandHandler : IRequestHandler<Create{{.CapsResourceNameSingular}}Command, int>
    {
        private readonly I{{.CapsResourceNameSingular}}Repository _{{.SmallResourceNameSingular}}Repository;
        private readonly IMapper _mapper;
        private readonly ILogger<Create{{.CapsResourceNameSingular}}CommandHandler> _logger;

        public Create{{.CapsResourceNameSingular}}CommandHandler(I{{.CapsResourceNameSingular}}Repository {{.SmallResourceNameSingular}}Repository, IMapper mapper, ILogger<Create{{.CapsResourceNameSingular}}CommandHandler> logger)
        {
            _{{.SmallResourceNameSingular}}Repository = {{.SmallResourceNameSingular}}Repository;
            _mapper = mapper;
            _logger = logger;
        }

        public async Task<int> Handle(Create{{.CapsResourceNameSingular}}Command request, CancellationToken cancellationToken)
        {
            var {{.SmallResourceNameSingular}}Entity = _mapper.Map<{{.CapsResourceNameSingular}}>(request);

            /*****************************************************************************/
            var generated{{.CapsResourceNameSingular}} = await _{{.SmallResourceNameSingular}}Repository.AddAsync({{.SmallResourceNameSingular}}Entity);
            /*****************************************************************************/
            _logger.LogInformation($" {generated{{.CapsResourceNameSingular}}} successfully created.");
            return generated{{.CapsResourceNameSingular}}.Id;
        }
    }
}
